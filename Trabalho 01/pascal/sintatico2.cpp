#include "sintatico.hpp"

void Parser::set_productions(){
	set_production(PROGRAMA, _PROGRAM, {_PROGRAM,_ID,_SEMICOLON,BLOCO,_DOT});
	set_production(BLOCO, _BEGIN, {AAA});
	set_production(BLOCO, _FUNCTION, {AAA});
	set_production(BLOCO, _PROCEDURE, {AAA});
	set_production(BLOCO, _VAR, {_VAR,_ID,A,_COLON,TIPO,_SEMICOLON,AA,AAA});
	set_production(A, _COLON, {});
	set_production(A, _COMMA, {_COMMA,_ID,A});
	set_production(AA, _ID, {_ID,A,_COLON,TIPO,_SEMICOLON,AA});
	set_production(AA, _BEGIN, {});
	set_production(AA, _FUNCTION, {});
	set_production(AA, _PROCEDURE, {});
	set_production(AAA, _BEGIN, {X});
	set_production(AAA, _FUNCTION, {_FUNCTION,_ID,PARAMFORMAIS,_COLON,_ID,_SEMICOLON,BLOCO,_SEMICOLON,AAA});
	set_production(AAA, _PROCEDURE, {_PROCEDURE,_ID,PARAMFORMAIS,_SEMICOLON,BLOCO,_SEMICOLON,AAA});
	set_production(X, _BEGIN, {_BEGIN,COMANDO,Y,_END});
	set_production(Y, _SEMICOLON, {_SEMICOLON,COMANDO,Y});
	set_production(Y, _END, {});
	set_production(TIPO, _PLUS, {ZZZ,_DOUBLEDOT,CONSTANTE});
	set_production(TIPO, _ID, {_ID,ZZ});
	set_production(TIPO, _MINUS, {ZZZ,_DOUBLEDOT,CONSTANTE});
	set_production(TIPO, _NUM, {ZZZ,_DOUBLEDOT,CONSTANTE});
	set_production(TIPO, _ARRAY, {_ARRAY,_L_SQUARE_BRACKET,TIPO,B,_R_SQUARE_BRACKET,_OF,TIPO});
	set_production(ZZ, _SEMICOLON, {});
	set_production(ZZ, _COMMA, {});
	set_production(ZZ, _R_SQUARE_BRACKET, {});
	set_production(ZZ, _DOUBLEDOT, {_DOUBLEDOT,CONSTANTE});
	set_production(ZZZ, _PLUS, {_PLUS,_NUM});
	set_production(ZZZ, _MINUS, {_MINUS,_NUM});
	set_production(ZZZ, _NUM, {_NUM});
	set_production(B, _COMMA, {_COMMA,TIPO,B});
	set_production(B, _R_SQUARE_BRACKET, {});
	set_production(PARAMFORMAIS, _COLON, {});
	set_production(PARAMFORMAIS, _SEMICOLON, {});
	set_production(PARAMFORMAIS, _L_PAREN, {_L_PAREN,C,_ID,CC,_COLON,_ID,CCC,_R_PAREN});
	set_production(C, _ID, {});
	set_production(C, _VAR, {_VAR});
	set_production(CC, _COLON, {});
	set_production(CC, _COMMA, {_COMMA,_ID,CC});
	set_production(CCC, _SEMICOLON, {_SEMICOLON,C,_ID,CC,_COLON,_ID,CCC});
	set_production(CCC, _R_PAREN, {});
	set_production(VARIAVEL, _ID, {_ID});
	set_production(D, _PLUS, {});
	set_production(D, _SEMICOLON, {});
	set_production(D, _MINUS, {});
	set_production(D, _MULTIPLY, {});
	set_production(D, _DIV, {});
	set_production(D, _COMMA, {});
	set_production(D, _L_SQUARE_BRACKET, {_L_SQUARE_BRACKET,EXPRESSAO,DD,_R_SQUARE_BRACKET,D});
	set_production(D, _R_SQUARE_BRACKET, {});
	set_production(D, _R_PAREN, {});
	set_production(D, _AND, {});
	set_production(D, _END, {});
	set_production(D, _THEN, {});
	set_production(D, _DO, {});
	set_production(D, _EQUAL, {});
	set_production(D, _LESS_THAN, {});
	set_production(D, _GREATER_THAN, {});
	set_production(D, _OR, {});
	set_production(D, _ASSIGN, {});
	set_production(D, _GREATER_EQUAL, {});
	set_production(D, _NOT_EQUAL, {});
	set_production(D, _LESS_EQUAL, {});
	set_production(DD, _COMMA, {_COMMA,EXPRESSAO,DD});
	set_production(DD, _R_SQUARE_BRACKET, {});
	set_production(COMANDO, _ID, {_ID,Z});
	set_production(COMANDO, _SEMICOLON, {});
	set_production(COMANDO, _END, {});
	set_production(COMANDO, _IF, {_IF,EXPRESSAO,_THEN,X,_END,EE});
	set_production(COMANDO, _WHILE, {_WHILE,EXPRESSAO,_DO,COMANDO});
	set_production(COMANDO, _BEGIN, {X});
	set_production(Z, _SEMICOLON, {});
	set_production(Z, _L_SQUARE_BRACKET, {D,_ASSIGN,EXPRESSAO});
	set_production(Z, _L_PAREN, {_L_PAREN,EXPRESSAO,E,_R_PAREN});
	set_production(Z, _END, {});
	set_production(Z, _ASSIGN, {D,_ASSIGN,EXPRESSAO});
	set_production(E, _COMMA, {_COMMA,EXPRESSAO,E});
	set_production(E, _R_PAREN, {});
	set_production(EE, _SEMICOLON, {});
	set_production(EE, _END, {});
	set_production(EE, _ELSE, {_ELSE,X});
	set_production(EXPRESSAO, _PLUS, {EXPSIMPLES,F});
	set_production(EXPRESSAO, _ID, {EXPSIMPLES,F});
	set_production(EXPRESSAO, _MINUS, {EXPSIMPLES,F});
	set_production(EXPRESSAO, _L_PAREN, {EXPSIMPLES,F});
	set_production(EXPRESSAO, _NUM, {EXPSIMPLES,F});
	set_production(EXPRESSAO, _NOT, {EXPSIMPLES,F});
	set_production(F, _SEMICOLON, {});
	set_production(F, _COMMA, {});
	set_production(F, _R_SQUARE_BRACKET, {});
	set_production(F, _R_PAREN, {});
	set_production(F, _END, {});
	set_production(F, _THEN, {});
	set_production(F, _DO, {});
	set_production(F, _EQUAL, {_EQUAL,EXPSIMPLES});
	set_production(F, _LESS_THAN, {_LESS_THAN,EXPSIMPLES});
	set_production(F, _GREATER_THAN, {_GREATER_THAN,EXPSIMPLES});
	set_production(F, _GREATER_EQUAL, {_GREATER_EQUAL,EXPSIMPLES});
	set_production(F, _NOT_EQUAL, {_NOT_EQUAL,EXPSIMPLES});
	set_production(F, _LESS_EQUAL, {_LESS_EQUAL,EXPSIMPLES});
	set_production(EXPSIMPLES, _PLUS, {G,TERMO,GG});
	set_production(EXPSIMPLES, _ID, {G,TERMO,GG});
	set_production(EXPSIMPLES, _MINUS, {G,TERMO,GG});
	set_production(EXPSIMPLES, _L_PAREN, {G,TERMO,GG});
	set_production(EXPSIMPLES, _NUM, {G,TERMO,GG});
	set_production(EXPSIMPLES, _NOT, {G,TERMO,GG});
	set_production(G, _PLUS, {_PLUS});
	set_production(G, _ID, {});
	set_production(G, _MINUS, {_MINUS});
	set_production(G, _L_PAREN, {});
	set_production(G, _NUM, {});
	set_production(G, _NOT, {});
	set_production(GG, _PLUS, {_PLUS,TERMO,GG});
	set_production(GG, _SEMICOLON, {});
	set_production(GG, _MINUS, {_MINUS,TERMO,GG});
	set_production(GG, _COMMA, {});
	set_production(GG, _R_SQUARE_BRACKET, {});
	set_production(GG, _R_PAREN, {});
	set_production(GG, _END, {});
	set_production(GG, _THEN, {});
	set_production(GG, _DO, {});
	set_production(GG, _EQUAL, {});
	set_production(GG, _LESS_THAN, {});
	set_production(GG, _GREATER_THAN, {});
	set_production(GG, _OR, {_OR,TERMO,GG});
	set_production(GG, _GREATER_EQUAL, {});
	set_production(GG, _NOT_EQUAL, {});
	set_production(GG, _LESS_EQUAL, {});
	set_production(TERMO, _ID, {FATOR,H});
	set_production(TERMO, _L_PAREN, {FATOR,H});
	set_production(TERMO, _NUM, {FATOR,H});
	set_production(TERMO, _NOT, {FATOR,H});
	set_production(H, _PLUS, {});
	set_production(H, _SEMICOLON, {});
	set_production(H, _MINUS, {});
	set_production(H, _MULTIPLY, {_MULTIPLY,FATOR,H});
	set_production(H, _DIV, {_DIV,FATOR,H});
	set_production(H, _COMMA, {});
	set_production(H, _R_SQUARE_BRACKET, {});
	set_production(H, _R_PAREN, {});
	set_production(H, _AND, {_AND,FATOR,H});
	set_production(H, _END, {});
	set_production(H, _THEN, {});
	set_production(H, _DO, {});
	set_production(H, _EQUAL, {});
	set_production(H, _LESS_THAN, {});
	set_production(H, _GREATER_THAN, {});
	set_production(H, _OR, {});
	set_production(H, _GREATER_EQUAL, {});
	set_production(H, _NOT_EQUAL, {});
	set_production(H, _LESS_EQUAL, {});
	set_production(FATOR, _ID, {_ID,V});
	set_production(FATOR, _L_PAREN, {_L_PAREN,EXPRESSAO,_R_PAREN});
	set_production(FATOR, _NUM, {_NUM});
	set_production(FATOR, _NOT, {_NOT,FATOR});
	set_production(V, _PLUS, {});
	set_production(V, _SEMICOLON, {});
	set_production(V, _MINUS, {});
	set_production(V, _MULTIPLY, {});
	set_production(V, _DIV, {});
	set_production(V, _COMMA, {});
	set_production(V, _L_SQUARE_BRACKET, {D});
	set_production(V, _R_SQUARE_BRACKET, {});
	set_production(V, _L_PAREN, {_L_PAREN,VV,_R_PAREN});
	set_production(V, _R_PAREN, {});
	set_production(V, _AND, {});
	set_production(V, _END, {});
	set_production(V, _THEN, {});
	set_production(V, _DO, {});
	set_production(V, _EQUAL, {});
	set_production(V, _LESS_THAN, {});
	set_production(V, _GREATER_THAN, {});
	set_production(V, _OR, {});
	set_production(V, _GREATER_EQUAL, {});
	set_production(V, _NOT_EQUAL, {});
	set_production(V, _LESS_EQUAL, {});
	set_production(VV, _PLUS, {EXPRESSAO,E});
	set_production(VV, _ID, {EXPRESSAO,E});
	set_production(VV, _MINUS, {EXPRESSAO,E});
	set_production(VV, _L_PAREN, {EXPRESSAO,E});
	set_production(VV, _R_PAREN, {});
	set_production(VV, _NUM, {EXPRESSAO,E});
	set_production(VV, _NOT, {EXPRESSAO,E});
	set_production(CONSTANTE, _PLUS, {_PLUS,_NUM});
	set_production(CONSTANTE, _ID, {_ID});
	set_production(CONSTANTE, _MINUS, {_MINUS,_NUM});
	set_production(CONSTANTE, _NUM, {_NUM});
}
